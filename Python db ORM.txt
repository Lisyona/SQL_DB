import sqlalchemy
import sqlalchemy as sq
from sqlalchemy.orm import declarative_base, relationship, sessionmaker
import ast


DSN = 'postgresql://postgres:Lisyona@localhost:5432/books'
engine = sqlalchemy.create_engine(DSN)

Session = sessionmaker(bind = engine)

Base = declarative_base()


class Publisher(Base):
    __tablename__ = "publisher"

    publisher_id = sq.Column(sq.Integer, primary_key=True)
    publisher_name = sq.Column(sq.String(length=40), unique=True)

class Book(Base):
    __tablename__ = "book"

    book_id = sq.Column(sq.Integer, primary_key=True)
    title = sq.Column(sq.Text, nullable=False)
    publish_id = sq.Column(sq.Integer, sq.ForeignKey("publisher.publisher_id"), nullable=False)

    book = relationship("Book", back_populates="publisher")

class Shop(Base):
    __tablename__ = "shop"

    shop_id = sq.Column(sq.Integer, primary_key=True)
    shop_name = sq.Column(sq.Text, nullable=False)
    book = relationship("stock", back_populates="book")

class Stock(Base):
    __tablename__ = "stock"

    stock_id = sq.Column(sq.Integer, primary_key=True)
    title = sq.Column(sq.Text, nullable=False)
    id_book = sq.Column(sq.Integer, sq.ForeignKey("book.book_id"), nullable=False)
    id_publish = sq.Column(sq.Integer, sq.ForeignKey("publisher.publisher_id"), nullable=False)
    stock = relationship("stock", back_populates="book")
    stock = relationship("stock", back_populates="shop")

class Sale(Base):
    __tablename__ = "sale"

    sale_id = sq.Column(sq.Integer, primary_key=True)
    price = sq.Column(sq.Float, nullable=False)
    sale_date = sq.Column(sq.DATE, nullable=False)
    count = sq.Column(sq.Integer, nullable=False)
    id_stock = sq.Column(sq.Integer, sq.ForeignKey("stock.stock_id"), nullable=False)

def create_tables(engine):
    Base.metadata.create_all(engine)

with open('python ORM data for db.txt', 'r', encoding='utf-8') as file:
    data = file.read()
    book_data = ast.literal_eval(data)
    book_list = []

for record in book_data:
    model = {
        'publisher': Publisher,
        'shop': Shop,
        'book': Book,
        'stock': Stock,
        'sale': Sale,
    }[record.get('model')]
    session.add(model(id=record.get('pk'), **record.get('fields')))
session.commit()


publisher_input = input('¬ведите название издательства∆ ').lower()
def queer_shops(publisher_input):
    for c in session.query(Shop).filter(publisher.publisher_name==publisher_input).all():
        print(c)





